- name: Add an Apt signing key, uses whichever key is at the URL
  apt_key:
    url: http://nginx.org/keys/nginx_signing.key
    state: present

- name: Enforce appropriate /tmp folder permissions
  file:
    path: /tmp
    owner: root
    group: root
    mode: 0777
  become: true
  changed_when: false

- apt_repository:
    repo: deb http://nginx.org/packages/mainline/ubuntu/ xenial nginx
    filename: nginx
    state: present

- apt_repository:
    repo: deb-src http://nginx.org/packages/mainline/ubuntu/ xenial nginx
    filename: nginx
    state: present
    update_cache: yes

- openssl_dhparam:
    path: '{{ nginx_ssl_dhparam }}'
    size: 4096

- name: Install some packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - supervisor   
    - nginx-extras
    - luajit
    - lua-cjson
    - htop
    - nano
    - python-pip
    - build-essential  # for parity 
    - cmake            # for parity
    - libudev-dev      # for parity
  become: yes

- name: Install latest passlib with pip # needed for htpasswd
  pip: name=passlib

# Add a user to a password file and ensure permissions are set
- htpasswd:
    path: '{{ nginx_config_path }}/.htpasswd'
    name: '{{ nginx_auth_basic_login }}'
    password: '{{ nginx_auth_basic_password }}'
    owner: root
    group: www-data
    mode: 0640

- name: Install "json" node.js package globally.
  npm:
    name: json
    global: yes
  become: yes

- name: Download parity package
  get_url: 
    url: "{{ parity_deb }}"
    dest: /usr/bin/
    mode: 0555
  become: yes

- name: Create parity's folders
  file: 
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
  - "{{ parity_config_path }}"
  - "{{ nginx_includes_path }}"
  - "{{ parity_path }}"
  become: yes

- name: Remove default nginx config
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - '{{ nginx_config_path }}/sites-enabled/default'
  - '{{ nginx_config_path }}/conf.d/default.conf'
  become: yes

- name: Copy parity and supervisor configs
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
  with_items:
    - { src: "supervisor/parity.conf.jn2", dst: "/etc/supervisor/conf.d/parity.conf" }
    - { src: "parity/config.toml.jn2", dst: "{{ parity_config }}" }
    - { src: "parity/spec.json.jn2", dst: "{{ parity_spec }}" }
    - { src: "parity/auth.pwd.jn2", dst: "{{ parity_pwd }}" }
  become: yes

- name: Restart supervisor services
  service:
    name: "{{ item }}"
    state: restarted
    sleep: 5
  with_items:
   - supervisor

- name: Copy nginx config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
  with_items:
    - { src: "nginx/default_no_ui.conf.jn2", dst: "{{ nginx_config_path }}/conf.d/default.conf"}
    - { src: "nginx/eth-jsonrpc-access.lua", dst: "{{ nginx_config_path }}/conf.d/eth-jsonrpc-access.lua"}
  notify: reload nginx
  become: yes

- name: Enable UFW
  ufw:
    state: enabled

- name: Allow all access to tcp port 443
  ufw:
    rule: allow
    port: 443
    proto: tcp

- ufw:
    rule: limit
    port: ssh
    proto: tcp

- name: Allow websocket and rpc connect to blockchain network
  ufw:
    rule: allow
    port: '{{ item }}'
    proto: tcp
  with_items:
    - 8546
    - 8545

- name: Deny incoming requests and reload UFW
  ufw:
    state: reloaded
    policy: deny
    direction: incoming

- name: Allow blockchain nodes communication
  ufw:
    rule: allow
    port: '{{ item }}'
    proto: any
  with_items:
    - 30300

- pause:
    seconds: 5

- name: Create authority address
  uri:
    url: "{{ parity_url }}"
    method: POST
    body_format: json
    body: 
      jsonrpc: "2.0"
      method: "parity_newAccountFromPhrase"
      params: 
        - "{{ item.phrase }}"
        - "{{ item.pwd }}"
      id: 0
  with_items:
    "{{ parity_authorities }}"
  register: auth_addr


- name: Create users
  uri:
    url: "{{ parity_url }}"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "parity_newAccountFromPhrase"
      params:
        - "{{ item.phrase }}"
        - "{{ item.pwd }}"
      id: 0
  with_items:
    "{{ parity_users }}"
  register: user_addr

- name: Get enode address
  uri:
    url: "{{ parity_url }}"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "parity_enode"
      params: []
      id: 0
  register: enode_addr
  until: enode_addr.json.result is defined
  retries: 5
  delay: 3

- name: Debug auth_addr
  debug:
    msg: "Authority address is {{ auth_addr.results|json_query('[*].json.result') }}"

- name: Debug user_addr
  debug:
    msg: "User address is {{ user_addr.results|json_query('[*].json.result') }}"

- name: Debug endnode_addr
  debug:
    msg: "Endnode address is {{ hostvars[item].enode_addr.json.result }}"
  with_inventory_hostnames: nodes

- name: Add solc repo
  apt_repository:
    repo: "{{ solc_repo }}"
  become: yes
  run_once: true
  delegate_to: 127.0.0.1

- name: Install solc.
  apt:
    name: solc
    state: present
  become: true
  run_once: true
  delegate_to: 127.0.0.1

- name: Copy contracts
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
  with_items:
    - { src: "contracts/AdminValidatorList.sol", dst: "/tmp/AdminValidatorList.sol.tmp"}
  become: yes
  run_once: true
  delegate_to: 127.0.0.1

- replace:
    path: '/tmp/AdminValidatorList.sol.tmp'
    regexp: '0x0000000000000000000000000000000000000001'
    replace: "{{ hostvars[groups['nodes'][0]].auth_addr.results|json_query('[*].json.result')|join(',') }}"
  run_once: true
  delegate_to: 127.0.0.1

- replace:
    path: '/tmp/AdminValidatorList.sol.tmp'
    regexp: '0xffffffffffffffffffffffffffffffffffffffff'
    replace: "{{ hostvars[groups['nodes'][0]].user_addr.results.0.json.result }}"
  run_once: true
  delegate_to: 127.0.0.1

- name: Compile contract
  shell: "solc --bin --abi --optimize /tmp/AdminValidatorList.sol.tmp"
  register: byte_code
  run_once: true
  delegate_to: 127.0.0.1

- name: Add validator contract address
  shell: json -I -q -f "{{ parity_spec }}" -e "this.engine.authorityRound.params.validators.safeContract = '{{ contract_validators_addr }}'"

- name: Add validator contract bytes code
  shell: json -I -q -f "{{ parity_spec }}" -e "this.accounts['{{ contract_validators_addr }}'] = { "balance":'1', "constructor":'0x{{ byte_code.stdout_lines.3 }}'}"

- name: Add user address
  shell: json -I -q -f "{{ parity_spec }}" -e "this.accounts['{{ user_addr.results.0.json.result }}'] = {}"

- name: Add user balance
  shell: json -I -q -f "{{ parity_spec }}" -e "this.accounts['{{ hostvars[item].user_addr.results.0.json.result }}']['balance'] = '{{ hostvars[item].parity_users.0.balance }}'"
  with_inventory_hostnames: nodes

- name: Clean endnode address list
  shell: json -I -q -f "{{ parity_spec }}" -e "this.nodes = []" 
  with_inventory_hostnames: nodes

- name: Add endnode address
  shell: json -I -q -f "{{ parity_spec }}" -e "this.nodes.push('{{ hostvars[item].enode_addr.json.result }}')" 
  with_inventory_hostnames: nodes

- name: Add miner
  ini_file:
    dest: "{{ parity_config }}"
    section: "{{ item.sec }}"
    option: "{{ item.opt }}"
    value: "{{ item.val }}"
  with_items:
    - {sec: account, opt: password, val: '["{{ parity_pwd }}"]'}
    - {sec: mining, opt: engine_signer, val: "\"{{ auth_addr.results[groups['nodes'].index(inventory_hostname)].json.result }}\""}
  become: yes

- name: Restart supervisor services
  service:
    name: "{{ item }}"
    state: restarted
    sleep: 5
  with_items:
   - supervisor

- name: Copy services to the remote server
  copy:
    src: services/
    dest: /var/www/onlyoffice.io/services

- name: Install packages for request_ether_service
  npm:
    path: "{{ request_ether_service.src }}/"
  become: yes

- name: Set sender address from request-ether-service
  shell: 'sed "s/\"sender\":.*,/\"sender\": \"{{ user_addr.results.0.json.result }}\",/" -i {{ request_ether_service.src }}/config.js'

- name: Set sender unlock phrase from request-ether-service
  shell: 'sed "s/\"senderUnlockPhrase\":.*,/\"senderUnlockPhrase\": \"{{ parity_users.0.pwd }}\",/" -i {{ request_ether_service.src }}/config.js'
